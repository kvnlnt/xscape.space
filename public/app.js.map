{
  "version": 3,
  "sources": ["../src/app/lib/Dom.ts", "../src/app/lib/Feds.ts", "../src/app/pages/DesignSystem.ts", "../src/main.ts"],
  "sourcesContent": ["type Attr<T> = [keyof T, string];\n\nexport function useDom<T extends HTMLElement>(\n  selector: string,\n  ...attrs: Attr<T>[]\n): [(...children: (HTMLElement | Node)[]) => void, (...attrs: Attr<T>[]) => void] {\n  let element: T = document.querySelector(selector);\n  const setAttrs = (...attrs: Attr<T>[]): void => attrs.forEach(([k, v]) => (element[k] = v as any));\n\n  if (!element) {\n    window.addEventListener('DOMContentLoaded', () => {\n      element = document.querySelector(selector);\n      setAttrs(...attrs);\n    });\n  } else {\n    setAttrs(...attrs);\n  }\n  const setHtml = (...children: (HTMLElement | Node)[]) => {\n    element.innerHTML = '';\n    children.forEach((child) => element.appendChild(child));\n  };\n  return [setHtml, setAttrs];\n}\n", "import { Colors } from './Palette';\n\n/**\n * Set any property\n */\ntype AttributeProp<T extends keyof HTMLElementTagNameMap> = Extract<keyof HTMLElementTagNameMap[T], string>;\ntype AttributeValue = string;\ntype AttrFeature<T extends keyof HTMLElementTagNameMap> = [AttributeProp<T>, AttributeValue];\nfunction Attr<T extends keyof HTMLElementTagNameMap>(el: HTMLElement, ...feature: AttrFeature<T>) {\n  const [prop, val]: AttrFeature<T> = feature;\n  el.setAttribute(prop, String(val));\n}\n\n/**\n * Set color from available palette\n */\ntype ColorColors = keyof typeof Colors;\ntype ColorAdjustBrightness = number;\ntype ColorOpacity = number;\ntype ColorFeature = [ColorColors, ColorAdjustBrightness?, ColorOpacity?];\nfunction Color(el: HTMLElement, ...feature: ColorFeature) {\n  const [color, brightness, opacity]: ColorFeature = feature;\n  const [h, s, l] = color;\n  const hsla = `hsla(${h}deg,${s}%,${l + brightness}%,${opacity})`;\n  el.style.color = hsla;\n}\n\n/**\n * Handle Event Bus Message\n */\ntype BindFeature = [(el: HTMLElement) => void];\nfunction Bind(el: HTMLElement, ...feature: BindFeature) {\n  const [cb]: BindFeature = feature;\n  cb(el);\n}\n\n/**\n * Handle Form Submit\n */\ntype OnSubmitFeature = [(evt: SubmitEvent) => void];\nfunction OnSubmit(el: HTMLElement, ...feature: OnSubmitFeature) {\n  const [cb]: OnSubmitFeature = feature;\n  el.addEventListener('submit', (evt: SubmitEvent) => {\n    evt.preventDefault();\n    cb(evt);\n  });\n}\n\n/**\n * Handle Input\n */\ntype OnInputFeature = [(el: HTMLElement) => void];\nfunction OnInput(el: HTMLElement, ...feature: OnInputFeature) {\n  const [cb]: OnInputFeature = feature;\n  el.addEventListener('input', (evt: InputEvent) => cb(evt.target as HTMLInputElement));\n}\n\n/**\n * Set any style\n */\ntype StyleProp = keyof CSSStyleDeclaration;\ntype StyleValue = string;\ntype StyleFeature = [StyleProp, StyleValue];\nfunction Style(el: HTMLElement, ...feature: StyleFeature) {\n  const [prop, val] = feature;\n  el.style[prop as number] = val;\n}\n\n/**\n * Html Templating Engine\n */\ntype HtmlNode = HTMLElement | string | number | SVGElement;\n\nexport const html =\n  <\n    T extends keyof Partial<HTMLElementTagNameMap>,\n    U extends 'attr' | 'bind' | 'color' | 'style' | 'oninput' | 'onsubmit',\n  >(\n    tag: T,\n    ...features: [\n      U,\n      ...(U extends 'attr'\n        ? AttrFeature<T>\n        : U extends 'bind'\n        ? BindFeature\n        : U extends 'color'\n        ? ColorFeature\n        : U extends 'style'\n        ? StyleFeature\n        : U extends 'oninput'\n        ? OnInputFeature\n        : U extends 'onsubmit'\n        ? OnSubmitFeature\n        : unknown)\n    ][]\n  ) =>\n  (...children: HtmlNode[]) => {\n    const el = document.createElementNS('http://www.w3.org/1999/xhtml', tag);\n\n    // features\n    features.forEach((feature) => {\n      const [featureAttr, ...featureArgs] = feature;\n      switch (featureAttr) {\n        case 'attr':\n          Attr<T>(el, ...(featureArgs as AttrFeature<T>));\n          break;\n        case 'bind':\n          Bind(el, ...(featureArgs as BindFeature));\n          break;\n        case 'color':\n          Color(el, ...(featureArgs as ColorFeature));\n          break;\n        case 'style':\n          Style(el, ...(featureArgs as StyleFeature));\n          break;\n        case 'oninput':\n          OnInput(el, ...(featureArgs as OnInputFeature));\n          break;\n        case 'onsubmit':\n          OnSubmit(el, ...(featureArgs as OnSubmitFeature));\n          break;\n      }\n    });\n\n    // Append children\n    children.forEach((child) => {\n      if (child instanceof Node) el.appendChild(child);\n      if (typeof child === 'string' || typeof child === 'number') el.innerHTML += child;\n    });\n\n    return el;\n  };\n\n/**\n * A miniature \"Event Bus\"\n */\ntype Pub = (eventName: string) => void;\ntype Sub = (eventName: string, cb: Function) => void;\ntype Subscriber = { eventName: string; cb: Function };\n\nexport const useSignal = (..._: string[]): [Pub, Sub] => {\n  const subscribers: Subscriber[] = [];\n  const pub: Pub = (eventName: string) => subscribers.filter((i) => i.eventName === eventName).forEach((i) => i.cb());\n  const sub: Sub = (eventName: string, cb: Function) => subscribers.push({ eventName, cb });\n  return [pub, sub];\n};\n\n/**\n * Model\n */\ntype ModelSubscription<T> = { key: keyof T; cb: (val: T[keyof T]) => void };\nexport const useModel = <T>(\n  model: T,\n): {\n  get: (key: keyof T) => T[keyof T];\n  set: (key: keyof T, val: T[keyof T]) => T[keyof T];\n  sub: (key: keyof T, cb: (val: T[keyof T]) => void) => void;\n} => {\n  const _model: T = model;\n  const _subscriptions: ModelSubscription<T>[] = [];\n\n  const subscriber = (key: keyof T, cb: (val: T[keyof T]) => void) => {\n    _subscriptions.push({\n      key,\n      cb,\n    });\n  };\n\n  const getter = (key: keyof T) => {\n    return _model[key];\n  };\n\n  const setter = (key: keyof T, val: T[keyof T]) => {\n    _model[key] = val;\n    _subscriptions.filter((i) => i.key === key).forEach((i) => i.cb(_model[key]));\n    return _model[key];\n  };\n\n  return {\n    get: getter,\n    set: setter,\n    sub: subscriber,\n  };\n};\n\n/**\n * Machine\n */\ntype MachineSubscription<Context, Actions> = { action: Actions; cb: (context: Context) => void };\nexport const useMachine = <Context, Actions, Messages extends { action: Actions; payload?: Partial<Context> }>(\n  context: Context,\n  machine: (message: Messages, context: Context) => Context,\n): {\n  get: (key: keyof Context) => Context[keyof Context];\n  pub: (message: Messages) => void;\n  sub: (key: Actions, cb: (context: Context) => Context) => void;\n} => {\n  let _context: Context = context;\n  const _subs: MachineSubscription<Context, Actions>[] = [];\n\n  const sub = (action: Actions, cb: (context: Context) => void) => {\n    _subs.push({\n      action,\n      cb,\n    });\n  };\n\n  const get = (key: keyof Context) => {\n    return _context[key];\n  };\n\n  const pub = (message: Messages & { action: string }) => {\n    _context = machine(message, _context);\n    _subs.filter((sub) => sub['action'] === message['action']).forEach((i) => i.cb(_context));\n    return _context;\n  };\n\n  return {\n    get,\n    pub,\n    sub,\n  };\n};\n", "import { html as $, useMachine } from '@lib/Feds';\n\ntype Context = {\n  todo: string;\n  state?: 'IDLE';\n};\n\ntype Messages = { action: 'TODO_UPDATE'; payload: Context } | { action: 'SUBMIT' };\n\n// machine\nconst machine = useMachine<Context, Messages['action'], Messages>(\n  { todo: 'test', state: 'IDLE' },\n  (message: Messages, context: Context) => {\n    switch (context.state) {\n      case 'IDLE':\n        switch (message.action) {\n          case 'TODO_UPDATE':\n            context = { ...context, todo: message.payload.todo };\n            break;\n          case 'SUBMIT':\n            console.log(context);\n            break;\n        }\n    }\n    return context;\n  },\n);\n\nexport const DesignSystem = () => {\n  // listeners\n  const listenForContextChange = (el: HTMLElement) =>\n    machine.sub('TODO_UPDATE', (context) => {\n      el.innerText = context.todo;\n      return null;\n    });\n\n  const handleInput = (el: HTMLInputElement) => machine.pub({ action: 'TODO_UPDATE', payload: { todo: el.value } });\n\n  const template = $('div')(\n    $('h1', ['color', 'blue'])('ExampleApp'),\n    $('h2', ['style', 'fontSize', '24px'])('subtitle'),\n    $('div', ['style', 'fontSize', '18px'], ['bind', listenForContextChange])('...'),\n    $('form', ['onsubmit', () => machine.pub({ action: 'SUBMIT' })])(\n      $('fieldset')(\n        $('legend')('to dos'),\n        $('input', ['attr', 'name', 'input'], ['oninput', handleInput])(),\n        $('button', ['attr', 'type', 'submit'])('Submit'),\n      ),\n    ),\n  );\n\n  return template;\n};\n\n// const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';\n", "import { useDom } from '@lib/Dom';\nimport { DesignSystem } from '@pages/DesignSystem';\n\nwindow.addEventListener('DOMContentLoaded', async () => {\n  const resetStyle = `margin:0px;padding:0px;width:100vw;height:100vh;`;\n  const [body] = useDom('body', ['style', resetStyle]);\n  body(DesignSystem());\n});\n"],
  "mappings": "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",
  "names": []
}
