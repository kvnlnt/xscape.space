{
  "version": 3,
  "sources": ["../src/app/lib/Dom.ts", "../src/app/framework/colors.ts", "../src/app/framework/html.ts", "../src/app/lib/Feds.ts", "../src/app/pages/DesignSystem.ts", "../src/main.ts"],
  "sourcesContent": ["type Attr<T> = [keyof T, string];\n\nexport function useDom<T extends HTMLElement>(\n  selector: string,\n  ...attrs: Attr<T>[]\n): [(...children: (HTMLElement | Node)[]) => void, (...attrs: Attr<T>[]) => void] {\n  let element: T = document.querySelector(selector);\n  const setAttrs = (...attrs: Attr<T>[]): void => attrs.forEach(([k, v]) => (element[k] = v as any));\n\n  if (!element) {\n    window.addEventListener('DOMContentLoaded', () => {\n      element = document.querySelector(selector);\n      setAttrs(...attrs);\n    });\n  } else {\n    setAttrs(...attrs);\n  }\n  const setHtml = (...children: (HTMLElement | Node)[]) => {\n    element.innerHTML = '';\n    children.forEach((child) => element.appendChild(child));\n  };\n  return [setHtml, setAttrs];\n}\n", "export const Colors = {\n  black: [0, 0, 5],\n  brown: [44, 11, 14],\n  red: [0, 100, 50],\n  blue: [240, 100, 50],\n  yellow: [55, 100, 50],\n  green: [118, 100, 50],\n  purple: [270, 100, 50],\n  orange: [30, 100, 50],\n  transparent: 'transparent',\n  white: [0, 0, 100],\n};\n\nexport const Color = (color: keyof typeof Colors, adjustLightness: number = 0, opacity: number = 1) => {\n  if (color === 'transparent') return color;\n  const [h, s, l] = Colors[color];\n  const hsla = `hsla(${h}deg,${s}%,${l + adjustLightness}%,${opacity})`;\n  return hsla;\n};\n", "type OmitFirstArg<T> = T extends (x: any, ...args: infer P) => infer R ? (...args: P) => R : never;\n\n// Html Template engine\ntype Tags = keyof HTMLElementTagNameMap;\ntype FeatureProp = string;\ntype FeatureFunc = (el: HTMLElement, ...a: any) => any;\ntype FeatureParams<T> = Parameters<OmitFirstArg<T>>;\n\nexport const Html =\n  <T extends Record<FeatureProp, FeatureFunc>>(features: T) =>\n  <KS extends Array<keyof T>>(\n    tag: Tags,\n    ...attrs: { [I in keyof KS]-?: [KS[I], ...FeatureParams<T[Extract<KS[I], keyof T>]>] }\n  ) =>\n  (...children: (HTMLElement | string | number | SVGElement)[]) => {\n    // Create element\n    const el = document.createElementNS('http://www.w3.org/1999/xhtml', tag);\n\n    // Run features\n    attrs.forEach(([attr, ...args]) => features[attr](el, ...args));\n\n    // Append children\n    children.forEach((child) => {\n      if (child instanceof Node) el.appendChild(child);\n      if (typeof child === 'string' || typeof child === 'number') el.innerHTML += child;\n    });\n\n    return el;\n  };\n", "/**\n * Machine\n */\ntype MachineSubscription<Context, Actions> = { action: Actions; cb: (context: Context) => void };\nexport const useMachine = <Context, Actions, Messages extends { action: Actions; payload?: Partial<Context> }>(\n  context: Context,\n  machine: (message: Messages, context: Context) => Context,\n): {\n  get: (key: keyof Context) => Context[keyof Context];\n  pub: (message: Messages) => void;\n  sub: (key: Actions, cb: (context: Context) => Context) => void;\n} => {\n  let _context: Context = context;\n  const _subs: MachineSubscription<Context, Actions>[] = [];\n\n  const sub = (action: Actions, cb: (context: Context) => void) => {\n    _subs.push({\n      action,\n      cb,\n    });\n  };\n\n  const get = (key: keyof Context) => {\n    return _context[key];\n  };\n\n  const pub = (message: Messages & { action: string }) => {\n    _context = machine(message, _context);\n    _subs.filter((sub) => sub['action'] === message['action']).forEach((i) => i.cb(_context));\n    return _context;\n  };\n\n  return {\n    get,\n    pub,\n    sub,\n  };\n};\n\n// /**\n//  * A miniature \"Event Bus\"\n//  */\n// type Pub = (eventName: string) => void;\n// type Sub = (eventName: string, cb: Function) => void;\n// type Subscriber = { eventName: string; cb: Function };\n\n// export const useSignal = (..._: string[]): [Pub, Sub] => {\n//   const subscribers: Subscriber[] = [];\n//   const pub: Pub = (eventName: string) => subscribers.filter((i) => i.eventName === eventName).forEach((i) => i.cb());\n//   const sub: Sub = (eventName: string, cb: Function) => subscribers.push({ eventName, cb });\n//   return [pub, sub];\n// };\n\n// /**\n//  * Model\n//  */\n// type ModelSubscription<T> = { key: keyof T; cb: (val: T[keyof T]) => void };\n// export const useModel = <T>(\n//   model: T,\n// ): {\n//   get: (key: keyof T) => T[keyof T];\n//   set: (key: keyof T, val: T[keyof T]) => T[keyof T];\n//   sub: (key: keyof T, cb: (val: T[keyof T]) => void) => void;\n// } => {\n//   const _model: T = model;\n//   const _subscriptions: ModelSubscription<T>[] = [];\n\n//   const subscriber = (key: keyof T, cb: (val: T[keyof T]) => void) => {\n//     _subscriptions.push({\n//       key,\n//       cb,\n//     });\n//   };\n\n//   const getter = (key: keyof T) => {\n//     return _model[key];\n//   };\n\n//   const setter = (key: keyof T, val: T[keyof T]) => {\n//     _model[key] = val;\n//     _subscriptions.filter((i) => i.key === key).forEach((i) => i.cb(_model[key]));\n//     return _model[key];\n//   };\n\n//   return {\n//     get: getter,\n//     set: setter,\n//     sub: subscriber,\n//   };\n// };\n", "import { Color, Colors } from '@framework/colors';\nimport { Html } from '@framework/html';\nimport { useMachine } from '@lib/Feds';\n\ntype Context = {\n  todo: string;\n  state?: 'IDLE';\n};\n\ntype Messages = { action: 'TODO_UPDATE'; payload: Context } | { action: 'SUBMIT' };\n\n// machine\nconst machine = useMachine<Context, Messages['action'], Messages>(\n  { todo: 'test', state: 'IDLE' },\n  (message: Messages, context: Context) => {\n    switch (context.state) {\n      case 'IDLE':\n        switch (message.action) {\n          case 'TODO_UPDATE':\n            context = { ...context, todo: message.payload.todo };\n            break;\n          case 'SUBMIT':\n            console.log(context);\n            break;\n        }\n    }\n    return context;\n  },\n);\n\nexport const DesignSystem = () => {\n  const $ = Html({\n    color: (el, color: keyof typeof Colors) => (el.style.color = Color(color)),\n    font_size: (el, size: number) => (el.style.fontSize = `${size}px`),\n    on_input: (el: HTMLInputElement) => {\n      el.addEventListener('input', () => {\n        machine.pub({ action: 'TODO_UPDATE', payload: { todo: el.value } });\n      });\n    },\n    on_submit: (el) => {\n      el.addEventListener('click', (e) => {\n        e.preventDefault();\n        machine.pub({ action: 'SUBMIT' });\n      });\n    },\n    on_machine_message: (el: HTMLElement, msg: 'TODO_UPDATE') =>\n      machine.sub(msg, (context) => {\n        if (msg === 'TODO_UPDATE') el.innerText = context.todo;\n        return null;\n      }),\n  });\n\n  const template = $('div')(\n    $('h1', ['color', 'blue'])('ExampleApp'),\n    $('h2', ['font_size', 24])('subtitle'),\n    $('div', ['font_size', 18], ['on_machine_message', 'TODO_UPDATE'])('...'),\n    $('form')($('fieldset')($('legend')('to dos'), $('input', ['on_input'])(), $('button', ['on_submit'])('Submit'))),\n  );\n\n  return template;\n};\n\n// const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';\n", "import { useDom } from '@lib/Dom';\nimport { DesignSystem } from '@pages/DesignSystem';\n\nwindow.addEventListener('DOMContentLoaded', async () => {\n  const resetStyle = `margin:0px;padding:0px;width:100vw;height:100vh;`;\n  const [body] = useDom('body', ['style', resetStyle]);\n  body(DesignSystem());\n});\n"],
  "mappings": "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",
  "names": []
}
