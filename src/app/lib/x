/**
 * Set any property
 */
type AttributeProp<T extends keyof HTMLElementTagNameMap> = Extract<keyof HTMLElementTagNameMap[T], string>;
type AttributeValue = string;
type AttrFeature<T extends keyof HTMLElementTagNameMap> = [AttributeProp<T>, AttributeValue];
function Attr<T extends keyof HTMLElementTagNameMap>(el: HTMLElement, ...feature: AttrFeature<T>) {
  const [prop, val]: AttrFeature<T> = feature;
  el.setAttribute(prop, String(val));
}

/**
 * Set color from available palette
 */
type ColorColors = keyof typeof Colors;
type ColorAdjustBrightness = number;
type ColorOpacity = number;
type ColorFeature = [ColorColors, ColorAdjustBrightness?, ColorOpacity?];
function Color(el: HTMLElement, ...feature: ColorFeature) {
  const [color, brightness, opacity]: ColorFeature = feature;
  const [h, s, l] = color;
  const hsla = `hsla(${h}deg,${s}%,${l + brightness}%,${opacity})`;
  el.style.color = hsla;
}

/**
 * Handle Event Bus Message
 */
type BindFeature = [(el: HTMLElement) => void];
function Bind(el: HTMLElement, ...feature: BindFeature) {
  const [cb]: BindFeature = feature;
  cb(el);
}

/**
 * Handle Form Submit
 */
type OnSubmitFeature = [(evt: SubmitEvent) => void];
function OnSubmit(el: HTMLElement, ...feature: OnSubmitFeature) {
  const [cb]: OnSubmitFeature = feature;
  el.addEventListener('submit', (evt: SubmitEvent) => {
    evt.preventDefault();
    cb(evt);
  });
}

/**
 * Handle Input
 */
type OnInputFeature = [(el: HTMLElement) => void];
function OnInput(el: HTMLElement, ...feature: OnInputFeature) {
  const [cb]: OnInputFeature = feature;
  el.addEventListener('input', (evt: InputEvent) => cb(evt.target as HTMLInputElement));
}

/**
 * Set any style
 */
type StyleProp = keyof CSSStyleDeclaration;
type StyleValue = string;
type StyleFeature = [StyleProp, StyleValue];
function Style(el: HTMLElement, ...feature: StyleFeature) {
  const [prop, val] = feature;
  el.style[prop as number] = val;
}
