import { Color } from '@framework/colors';
import { CSS } from '@framework/css';
import { ClassList, Html, Style } from '@framework/html';

const css = CSS({
  wrapper: [
    ['display', 'flex'],
    ['flexDirection', 'row'],
    ['alignItems', 'center'],
    ['justifyContent', 'center'],
    ['height', '100%'],
    ['cursor', 'pointer'],
  ],
  bar_bg: [
    ['backgroundColor', Color('white', 0, 0.01)],
    ['marginLeft', '5px'],
    ['borderRadius', '14px'],
    ['display', 'flex'],
    ['flexDirection', 'column'],
    ['alignItems', 'center'],
    ['justifyContent', 'center'],
    ['height', '100%'],
    ['width', '12px'],
    ['position', 'relative'],
  ],
  bar: [
    ['backgroundColor', Color('purple')],
    ['borderRadius', '7px'],
    ['width', '100%'],
    ['transition', 'all 0.50s'],
    ['height', '0%'],
    ['position', 'absolute'],
  ],
});

const $ = Html({
  css: ClassList,
  style: Style,
});

const SpectralBar = (bar: Bar) => {
  const [h1, o1, h2, o2, h3, o3] = bar;
  const t = $('div', ['css', css('wrapper')])(
    $('div', ['css', css('bar_bg')])(
      $('div', ['css', css('bar')], ['style', `height:${h1}%;top:${o1}%`])(),
      $('div', ['css', css('bar')], ['style', `height:${h2}%;top:${o2}%`])(),
      $('div', ['css', css('bar')], ['style', `height:${h3}%;top:${o3}%`])(),
    ),
  );
  return t;
};

export const Spectrum = (char: keyof typeof CHAR) => {
  const t = $('div', ['css', css('wrapper')])(
    SpectralBar(CHAR[char][0]),
    SpectralBar(CHAR[char][1]),
    SpectralBar(CHAR[char][2]),
  );
  return t;
};

type Height = number;
type Offset = number;
type Bar = [Height, Offset, Height, Offset, Height, Offset];
type Char = [Bar, Bar, Bar];

export const CHAR: Record<string, Char> = {
  0: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 80, 0, 0],
    [0, 0, 100, 0, 0, 0],
  ],
  1: [
    [20, 0, 20, 80, 0, 0],
    [100, 0, 0, 0, 0, 0],
    [0, 0, 20, 80, 0, 0],
  ],
  2: [
    [20, 0, 60, 40, 0, 0],
    [20, 0, 20, 80, 20, 40],
    [60, 0, 20, 80, 0, 0],
  ],
  3: [
    [20, 0, 20, 80, 20, 40],
    [20, 0, 20, 80, 20, 40],
    [100, 0, 0, 0, 0, 0],
  ],
  4: [
    [60, 0, 0, 0, 0, 0],
    [20, 40, 0, 0, 0, 0],
    [100, 0, 0, 0, 0, 0],
  ],
  5: [
    [60, 0, 20, 80, 0, 0],
    [20, 0, 20, 80, 20, 40],
    [20, 0, 60, 40, 0, 0],
  ],
  6: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 80, 20, 40],
    [20, 0, 60, 40, 0, 0],
  ],
  7: [
    [20, 0, 0, 0, 0, 0],
    [20, 0, 0, 0, 0, 0],
    [100, 0, 0, 0, 0, 0],
  ],
  8: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 80, 20, 40],
    [100, 0, 0, 0, 0, 0],
  ],
  9: [
    [60, 0, 0, 0, 0, 0],
    [20, 0, 20, 40, 0, 0],
    [100, 0, 0, 0, 0, 0],
  ],
  A: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 40, 0, 0],
    [100, 0, 0, 0, 0, 0],
  ],
  B: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 80, 20, 40],
    [100, 0, 0, 0, 0, 0],
  ],
  C: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 80, 0, 0],
    [20, 0, 20, 80, 0, 0],
  ],
  D: [
    [100, 0, 0, 0, 0, 0],
    [20, 0, 20, 80, 0, 0],
    [100, 0, 0, 0, 0, 0],
  ],
  E: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  F: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  G: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  H: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  I: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  J: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  K: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  L: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  M: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  N: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  O: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  P: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  Q: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  R: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  S: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  T: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  U: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  V: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  W: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  X: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  Y: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
  Z: [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
  ],
};
